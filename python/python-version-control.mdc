
# Version Control Guidelines

**Rationale:** These guidelines promote clean, maintainable git history
using Conventional Commits and best practices. They help teams collaborate
effectively and make project history easier to understand and navigate.

## Pre-commit Integration

**Guideline:** Work with pre-commit hooks as part of your development workflow
to maintain consistent code quality and formatting.

### Pre-commit Workflow Examples

**Typical pre-commit workflow:**

```bash
# 1. Stage your changes
git add src/myproject/auth.py tests/test_auth.py

# 2. Attempt to commit (pre-commit hooks run automatically)
git commit -m "feat(auth): add JWT token validation"

# 3. If hooks make changes, review and re-add them
git add .  # Add any auto-fixed changes
git commit -m "feat(auth): add JWT token validation"

# 4. If hooks report errors that aren't auto-fixed:
# - Review the error messages
# - Fix the issues manually
# - Stage the fixes and commit again
```

**When pre-commit hooks fail:**

```bash
# Example: Ruff finds linting issues
$ git commit -m "feat(auth): add new login endpoint"
ruff....................................................................Failed
- hook id: ruff
- exit code: 1

# Fix the issues first, then commit
uv run ruff check --fix src/myproject/auth.py
git add src/myproject/auth.py
git commit -m "feat(auth): add new login endpoint"
```

## Conventional Commit Standards

**Guideline:** Use Conventional Commits to create consistent, informative
commit messages that clearly communicate the nature and scope of changes.

### Commit Message Examples

**Effective commit message structure:**

```bash
# Format: <type>(scope): <description>

# Feature additions
feat(auth): add JWT token validation with expiry checks
feat(cli): implement file processing command with progress bar
feat(api): add user profile endpoint with image upload support

# Bug fixes
fix(parser): handle empty CSV files without crashing
fix(auth): prevent session hijacking in concurrent requests
fix(validation): correct email regex to handle international domains

# Documentation
docs(readme): add installation instructions for Python 3.11+
docs(api): update authentication examples with new token format
docs(contributing): clarify testing requirements and setup

# Refactoring
refactor(database): extract connection pooling into separate module
refactor(auth): simplify user validation logic using decorators

# Tests
test(auth): add integration tests for password reset flow
test(parser): add edge cases for malformed input files

# Maintenance
chore(deps): update pytest to version 7.4.0
chore(cursor): update Python development guidelines
chore(ci): add Python 3.12 to test matrix
```

**Scope selection examples:**

```python
# For package structure like:
myproject/
├── myproject/
│   ├── __init__.py       # scope: myproject (or root package name)
│   ├── auth/
│   │   ├── __init__.py   # scope: auth
│   │   └── models.py     # scope: auth
│   ├── utils/
│   │   └── helpers.py    # scope: utils
│   └── cli/
│       └── commands.py   # scope: cli
└── tests/
    └── test_auth.py      # scope: auth (matches what's being tested)

# Example commits for this structure:
git commit -m "feat(auth): add OAuth2 provider integration"
git commit -m "fix(utils): resolve timezone handling in date helpers"
git commit -m "test(cli): add tests for file processing commands"
git commit -m "refactor(myproject): restructure main application entry point"
```

## Commit Organization and Best Practices

**Guideline:** Create focused, atomic commits that tell a clear story of your
project's evolution and make it easier to review, understand, and maintain.

### Commit Organization Examples

**Good commit organization:**

```bash
# Instead of one large commit:
# ❌ "feat(app): add user system with auth, validation, and tests"

# Break into logical commits:
# ✅ Series of focused commits:
git commit -m "feat(models): add User model with basic fields"
git commit -m "feat(auth): implement user registration and login"
git commit -m "feat(validation): add email and password validation"
git commit -m "test(auth): add comprehensive user authentication tests"
git commit -m "docs(auth): document authentication API endpoints"
```

**Atomic commit examples:**

```bash
# Good: Single logical change
feat(api): add pagination to user list endpoint

# Good: Clear bug fix
fix(auth): prevent duplicate user registration with same email

# Avoid: Multiple unrelated changes
# ❌ "feat(api): add pagination, fix auth bug, update docs"

# Better: Separate commits
feat(api): add pagination to user list endpoint
fix(auth): prevent duplicate user registration with same email
docs(api): update user endpoint documentation
```

**Breaking changes:**

```bash
# Option 1: Use ! indicator
feat(auth)!: change user ID from integer to UUID

# Option 2: Use BREAKING CHANGE footer
feat(auth): change user ID from integer to UUID

BREAKING CHANGE: User IDs are now UUIDs instead of integers.
Update any code that assumes numeric user IDs.
```

## Git Command Best Practices

**Guideline:** Use git commands effectively to maintain clean history and
efficient workflow, whether using standard commands or helpful aliases.

### Git Workflow Examples

**Standard git workflow:**

```bash
# Check current status
git status

# Stage specific changes
git add src/myproject/auth.py
git add tests/test_auth.py

# Review staged changes before committing
git diff --cached

# Commit with conventional message
git commit -m "feat(auth): add two-factor authentication support"

# View recent commits
git log --oneline -10
```

**Helpful git aliases (if available):**

```bash
# Many developers use aliases for common operations:
# If you have shell aliases configured:
gcom "feat(auth): add JWT validation"  # Instead of git commit -m
gsta | cat                             # Instead of git diff --cached
gdiff | cat                           # Instead of git diff
gundo                                 # To undo last commit
gunstage                              # To unstage files

# Standard git equivalents:
git commit -m "feat(auth): add JWT validation"
git diff --cached | cat
git diff | cat
git reset HEAD~1                      # Undo last commit
git reset HEAD <file>                 # Unstage specific file
```

**Reviewing and fixing commits:**

```bash
# Before pushing, review your commit history
git log --oneline -5

# If you need to fix the last commit message:
git commit --amend -m "feat(auth): add JWT validation with proper error handling"

# If you need to add files to the last commit:
git add forgotten_file.py
git commit --amend --no-edit

# Interactive rebase for more complex history editing (use carefully):
git rebase -i HEAD~3  # Edit last 3 commits
```

## AI Assistant Collaboration

**Guideline:** When working with an AI assistant on git workflows, provide
context about your project structure, commit history goals, and any specific
conventions your team follows.

### Git Collaboration Examples

**Effective collaboration patterns:**

- "I need to restructure these commits before pushing. Can you help me
  organize these changes into logical, atomic commits following Conventional
  Commits format?"
- "This commit message doesn't clearly describe the change. Can you suggest
  a better conventional commit message for adding user authentication?"
- "I accidentally included unrelated changes in this commit. How can I split
  it into separate, focused commits?"

**Include relevant context:**

- Your project's package/module structure for scope selection
- Team conventions for commit organization and history
- Whether you're working on a feature branch or main branch
- Any specific conventional commit types your project uses
- Integration with tools like semantic-release or conventional-changelog
